//***********  Pool1.kt  *****



    import org.openrndr.application
    import org.openrndr.color.ColorRGBa
    import org.openrndr.math.Vector2
    import org.openrndr.panel.ControlManager
    import org.openrndr.panel.elements.Range
    import org.openrndr.panel.elements.button
    import org.openrndr.panel.elements.clicked
    import org.openrndr.panel.elements.slider
    import org.openrndr.panel.layout

    // Define the initial velocity of the pool ball
    var V = 1.0

    // Define the radius of the pool ball
    val RADIUS = 10.0

    // Define the initial position of the pool ball
    var POSITION = Vector2(100.0, 100.0)



    fun main() = application {
        configure {
            width = 500
            height = 500
        }
        program {
            // Create a control manager to manage the user interface
            var moving = false
            extend(ControlManager())  {
                // Create a horizontal layout to hold the controls
                layout {

                    // Add a label and a slider to control the initial velocity of the pool ball
                    button {
                        label = "click me"
                        // -- listen to the click event
                        height = 60
                        width = 40
                        backgroundColor = ColorRGBa.RED
                        clicked {
                            moving = true
                        }
                    }
                        slider {
                            backgroundColor = ColorRGBa.PINK
                            height = 60
                            width = 200
                        label = "velocity"
                        value = V
                        range = Range(0.0, 1.0)
                            events.valueChanged.listen { V = it.newValue }
                        }
                    }
                }


            // Draw the pool ball
            extend {
                drawer.fill = ColorRGBa.BLUE
                drawer.circle(POSITION, RADIUS)

                // Draw the three circles marking the pool ball
                drawer.fill = null
                drawer.stroke = ColorRGBa.WHITE
                drawer.circle(POSITION, RADIUS)
                drawer.circle(POSITION, RADIUS / 2)
                drawer.circle(POSITION, RADIUS / 4)
                if (moving) {
                    // Compute the new position of the pool ball
                    val newPosition = POSITION + Vector2(V, 0.0)
                    POSITION = newPosition
                }
                // Update the position of the pool ball
                  }
        }
    }

//****** pool2.kt  ******
b




import org.openrndr.Program
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.extra.color.presets.WHEAT
import org.openrndr.math.Vector2
import org.openrndr.panel.ControlManager
import org.openrndr.panel.elements.Range
import org.openrndr.panel.elements.button
import org.openrndr.panel.elements.clicked
import org.openrndr.panel.elements.slider
import org.openrndr.panel.layout
import kotlin.math.PI
import kotlin.math.cos
import kotlin.math.sin


fun main() = application {
// Define the initial velocity of the pool ball
     var velocity = Velocity(0.0, 0.0)
// Define the radius of the pool ball
    val rADIUS = 10.0

// Define the initial position of the pool ball
    var position = Position(100.0, 100.0)
    var angle = 0.0
    var force = 0.0
// Define the rolling resiDstance of the pool ball
    var rR = 0.3

    configure {
        width = 1000
        height = 700
    }
    program {
        // Create a control manager to manage the user interface
        var moving = false
        extend(ControlManager()) {
            // Create a horizontal layout to hold the controls
            layout {

                button {
                    if (!moving)
                        label = "Move"
                    else
                        label = "Stop"
                    // -- listen to the click event
                    height = 60
                    width = 40
                    backgroundColor = ColorRGBa.RED
                    clicked {
                        moving = !moving
                    }
                }
                slider {
                    backgroundColor = ColorRGBa.PINK
                    height = 60
                    width = 200
                    label = "rolling resistance"
                    value = rR
                    range = Range(0.0, 1.0)
                    events.valueChanged.listen { rR = it.newValue }
                }
                slider {
                    backgroundColor = ColorRGBa.BLUE
                    height = 60
                    width = 200
                    label = "force"
                    value = force
                    range = Range(0.0, 1.0)
                    events.valueChanged.listen { force = it.newValue }
                }
                slider {
                    backgroundColor = ColorRGBa.GREEN
                    height = 60
                    width = 200
                    label = "angle"
                    value = angle
                    range = Range(0.0, 360.0)
                    events.valueChanged.listen { angle = it.newValue }
                }
            }


            // Draw the pool ball
            extend {
                drawer.fill = ColorRGBa.BLUE
                drawBall(position, rADIUS)
                if (moving) {
                    // Compute the new position of the pool ball
                    position = updatePosition(position, velocity)
                }
                else
                {
                    val start = Vector2(position.x, position.y)
                    val percentage: Percentage = xyFromAngle2(angle)
                    val xDiff = force * percentage.x * 100.0
                    val yDiff = force * percentage.y * 100.0
                    val end = Vector2(start.x + xDiff, start.y + yDiff)
                    velocity = Velocity(force * percentage.x, force * percentage.y)
                    drawer.lineSegment(start, end)
                }
                // Update the position of the pool ball
            }
        }
    }


}


private fun Program.drawBall(position: Position, radius: Double) {
    val positionV2 = position.toVector2()
    drawer.circle(positionV2, radius)

    // Draw the three circles marking the pool ball
    drawer.fill = ColorRGBa.WHEAT
    drawer.stroke = ColorRGBa.WHITE
    drawer.circle(positionV2, radius)
    drawer.circle(positionV2, radius / 2)
    drawer.circle(positionV2, radius / 4)
}

private fun updatePosition(start : Position, speed: Velocity): Position{
    return Position (start.x + speed.x, start.y + speed.y)
}

private fun xyFromAngle2( angle : Double) : Percentage {
    val result = Percentage(0.0, 0.0)
    val radians = angle * PI / 180.0
    result.x = sin(radians)
    result.y = cos(radians)
    return result
}






/*
fun determineNumbersegments(balls: Array<Ball>): Int {
    var maximum= 0.0
    for (index in balls.indices) {
        val x = balls[index].velocity.x
        val y = balls[index].velocity.y
        if (x > maximum) maximum = x
        if (y > maximum) maximum = y
    }
    var result = floor(maximum + 0.99999).toInt()
    if (result > 200) {
        print ("limit\n")
        result = 200
    }
    if (result < 1){
        print("low\n")
        result = 1
    }

            return result
    }



fun computeOverlap(balls: Array<Ball>) : Boolean {
    var result = false
    for (first in balls.indices) {
        for (second in first + 1 until balls.size) {
            val distance: Double = computeDistanceSquared(balls[first].position, balls[second].position)
            if ((distance <= BALL_DIAMETER_SQUARED)) {
                result = true

            }
        }
    }
    return result

}


                dropdownButton {
                    label = "Option"
                    item {
                        label = "Item 1"
                        events.picked.listen {
                            println("you picked item 1")
                        }
                    }

                    item {
                        label = "Item 2"
                        events.picked.listen {
                            println("you picked item 2")
                        }
                    }
                } // end dropdown


*/


"unused")
fun computeDistance(position1: Position, position2: Position): Double {
    val distanceX = position1.x - position2.x
    val distanceY = position1.y - position2.y
    return sqrt(distanceX * distanceX + distanceY * distanceY)
}

fun computeTotalVelocity(velocity: Velocity): Double {
    return Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y)

}

"unused")
fun computeTotalMomentum(velocities: TwoVelocities): Double {
    return computeTotalMomentum(velocities.velocity1, velocities.velocity2)
}

s"unused")
fun computeTotalEnergy(velocity1: Velocity, velocity2: Velocity): Double {
    return computeEnergy(velocity1) + computeEnergy(velocity2)
}

// --Commented out by Inspection START (1/16/2023 7:21 PM):
//fun computeTotalEnergy(velocities: TwoVelocities): Double {
//    return computeTotalEnergy(velocities.velocity1, velocities.velocity2)
//}
// --Commented out by Inspection STOP (1/16/2023 7:21 PM)

// --Commented out by Inspection START (1/16/2023 7:21 PM):
//fun checkNextSegment(
//    position1: Position, position2: Position,
//    velocity1: Velocity, velocity2: Velocity, segments: Int
//): TwoPositions {
//    val thisPosition1 = position1
//    val thisPosition2 = position2
//    for (count in 0..10) {
//        var newPosition1: Position = updatePosition(thisPosition1, velocity1, segments)
//        var newPosition2: Position = updatePosition(thisPosition2, velocity2, segments)
//        if (colliding(newPosition1, newPosition2)) {
//            print("*** Still in collision range after collision " + count.toString() + "\n")
//            val distance = computeDistance(newPosition1, newPosition2)
//            print("\n Distance " + distance.toString())
//            print("p1 p2 " + newPosition1.toString() + " " + newPosition2.toString() + "\n")
//            print("v1 v2 " + velocity1 + " " + velocity2 + "\n")
//            //           thisPosition1 = newPosition1
//            //           thisPosition2 = newPosition2
//            break
//
//        }
//    }
//    return TwoPositions(Position(thisPosition1.x, thisPosition1.y), Position(thisPosition2.x, thisPosition2.y))
//}
// --Commented out by Inspection STOP (1/16/2023 7:21 PM)

            // One way to check to eliminate "double collision"
  /*
                val resultPositions = checkNextSegment(
                    firstBall.position, secondBall.position,
                    firstBall.velocity, secondBall.velocity, segments
                )
                firstBall.position = resultPositions.position1
                secondBall.position = resultPositions.position2
  */

fun computeEnergy(velocity: Velocity): Double {
    // mass is 1.0
    return velocity.x * velocity.x + velocity.y * velocity.y
}

fun computeMomentum(velocity: Velocity): Double {
    return sqrt(velocity.x * velocity.x + velocity.y + velocity.y)
}

fun computeTotalMomentum(velocity1: Velocity, velocity2: Velocity): Double {
    return computeMomentum(velocity1) + computeMomentum(velocity2)
}

//**** Check for not moving all the way

